# Generated by Django 5.2 on 2025-05-15 16:04

import api.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("api", "0002_remove_review_movie_remove_review_user_delete_movie_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=120, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "icon_class",
                    models.CharField(
                        blank=True,
                        help_text="Font Awesome class, e.g., 'fas fa-code'",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=60, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Tool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Leave blank to auto-generate from name",
                        max_length=170,
                        unique=True,
                    ),
                ),
                (
                    "tagline",
                    models.CharField(
                        help_text="A short, catchy phrase for the tool.", max_length=255
                    ),
                ),
                (
                    "short_description",
                    models.TextField(help_text="Brief summary shown in listings."),
                ),
                (
                    "long_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description for the tool's page.",
                        null=True,
                    ),
                ),
                (
                    "icon_image",
                    models.ImageField(
                        blank=True,
                        help_text="Recommended size: 128x128px",
                        null=True,
                        upload_to=api.models.tool_icon_path,
                    ),
                ),
                (
                    "banner_image",
                    models.ImageField(
                        blank=True,
                        help_text="Recommended size: 1200x400px",
                        null=True,
                        upload_to=api.models.tool_banner_path,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                            ("coming_soon", "Coming Soon"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("freemium", "Freemium"),
                            ("paid", "Paid"),
                            ("open_source", "Open Source"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "implementation_type",
                    models.CharField(
                        choices=[
                            ("django_app", "Internal Django App"),
                            ("external_link", "External Link"),
                        ],
                        default="external_link",
                        max_length=20,
                    ),
                ),
                (
                    "external_tool_url",
                    models.URLField(
                        blank=True,
                        help_text="Required if Implementation Type is 'External Link'.",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "internal_app_config_name",
                    models.CharField(
                        blank=True,
                        help_text="AppConfig name (e.g., 'app_label.apps.AppLabelConfig'). Required if Implementation Type is 'Internal Django App'.",
                        max_length=100,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "internal_app_url_namespace",
                    models.CharField(
                        blank=True,
                        help_text="URL namespace for the internal app. Required if Implementation Type is 'Internal Django App'.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "internal_app_entry_view_name",
                    models.CharField(
                        blank=True,
                        help_text="Entry view name (e.g., 'index') within the namespace. Required if Implementation Type is 'Internal Django App'.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "website_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional: Official website or documentation URL.",
                        max_length=2000,
                        null=True,
                    ),
                ),
                (
                    "repository_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional: Link to source code repository.",
                        max_length=2000,
                        null=True,
                    ),
                ),
                ("version", models.CharField(blank=True, max_length=20, null=True)),
                ("release_date", models.DateField(blank=True, null=True)),
                ("last_updated_on_platform", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "developer_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the individual developer or company.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "developer_link",
                    models.URLField(
                        blank=True,
                        help_text="Link to developer's website or profile.",
                        null=True,
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Highlight this tool on the homepage or special sections.",
                    ),
                ),
                ("views_count", models.PositiveIntegerField(default=0, editable=False)),
                (
                    "launch_count",
                    models.PositiveIntegerField(default=0, editable=False),
                ),
                (
                    "accent_color_class",
                    models.CharField(
                        blank=True,
                        help_text="Tailwind color class (e.g., 'teal', 'purple') for UI consistency.",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "font_awesome_icon_class",
                    models.CharField(
                        blank=True,
                        help_text="E.g., 'fas fa-cogs'. Use if no icon_image.",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tools",
                        to="api.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin/staff who added this tool to the platform.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tools_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="tools", to="api.tag"
                    ),
                ),
            ],
            options={
                "ordering": ["-is_featured", "-published_at", "name"],
            },
        ),
        migrations.CreateModel(
            name="ToolScreenshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to=api.models.tool_screenshot_path)),
                ("caption", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order of display, lower numbers first."
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="screenshots",
                        to="api.tool",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        default="user_avatars/default_avatar.png",
                        null=True,
                        upload_to=api.models.user_avatar_path,
                    ),
                ),
                (
                    "website_url",
                    models.URLField(blank=True, max_length=2000, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "1 - Terrible"),
                            (2, "2 - Poor"),
                            (3, "3 - Average"),
                            (4, "4 - Good"),
                            (5, "5 - Excellent"),
                        ]
                    ),
                ),
                ("comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_approved",
                    models.BooleanField(
                        default=True,
                        help_text="Admin can unapprove problematic reviews.",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="api.tool",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("tool", "user")},
            },
        ),
        migrations.CreateModel(
            name="UserToolInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[("favorite", "Favorite"), ("last_used", "Last Used")],
                        max_length=20,
                    ),
                ),
                ("interacted_at", models.DateTimeField(auto_now=True)),
                (
                    "tool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_interactions",
                        to="api.tool",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tool_interactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-interacted_at"],
                "unique_together": {("user", "tool", "interaction_type")},
            },
        ),
    ]
